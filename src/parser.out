Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECREMENT
    EQ
    GT
    GTE
    INCREMENT
    LT
    LTE
    NEQ

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression ADD expression
Rule 3     expression -> expression SUB expression
Rule 4     expression -> expression MUL expression
Rule 5     expression -> expression DIV expression
Rule 6     expression -> expression EXP expression
Rule 7     expression -> SUB expression
Rule 8     expression -> LPAREN expression RPAREN
Rule 9     expression -> INT
Rule 10    expression -> FLOAT
Rule 11    expression -> ID
Rule 12    expression -> BOOLEAN

Terminals, with rules where they appear

ADD                  : 2
BOOLEAN              : 12
DECREMENT            : 
DIV                  : 5
EQ                   : 
EXP                  : 6
FLOAT                : 10
GT                   : 
GTE                  : 
ID                   : 11
INCREMENT            : 
INT                  : 9
LPAREN               : 8
LT                   : 
LTE                  : 
MUL                  : 4
NEQ                  : 
RPAREN               : 8
SUB                  : 3 7
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 4 4 5 5 6 6 7 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    $end            reduce using rule 1 (statement -> expression .)
    ADD             shift and go to state 9
    SUB             shift and go to state 10
    MUL             shift and go to state 11
    DIV             shift and go to state 12
    EXP             shift and go to state 13


state 3

    (7) expression -> SUB . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 14

state 4

    (8) expression -> LPAREN . expression RPAREN
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 15

state 5

    (9) expression -> INT .

    ADD             reduce using rule 9 (expression -> INT .)
    SUB             reduce using rule 9 (expression -> INT .)
    MUL             reduce using rule 9 (expression -> INT .)
    DIV             reduce using rule 9 (expression -> INT .)
    EXP             reduce using rule 9 (expression -> INT .)
    $end            reduce using rule 9 (expression -> INT .)
    RPAREN          reduce using rule 9 (expression -> INT .)


state 6

    (10) expression -> FLOAT .

    ADD             reduce using rule 10 (expression -> FLOAT .)
    SUB             reduce using rule 10 (expression -> FLOAT .)
    MUL             reduce using rule 10 (expression -> FLOAT .)
    DIV             reduce using rule 10 (expression -> FLOAT .)
    EXP             reduce using rule 10 (expression -> FLOAT .)
    $end            reduce using rule 10 (expression -> FLOAT .)
    RPAREN          reduce using rule 10 (expression -> FLOAT .)


state 7

    (11) expression -> ID .

    ADD             reduce using rule 11 (expression -> ID .)
    SUB             reduce using rule 11 (expression -> ID .)
    MUL             reduce using rule 11 (expression -> ID .)
    DIV             reduce using rule 11 (expression -> ID .)
    EXP             reduce using rule 11 (expression -> ID .)
    $end            reduce using rule 11 (expression -> ID .)
    RPAREN          reduce using rule 11 (expression -> ID .)


state 8

    (12) expression -> BOOLEAN .

    ADD             reduce using rule 12 (expression -> BOOLEAN .)
    SUB             reduce using rule 12 (expression -> BOOLEAN .)
    MUL             reduce using rule 12 (expression -> BOOLEAN .)
    DIV             reduce using rule 12 (expression -> BOOLEAN .)
    EXP             reduce using rule 12 (expression -> BOOLEAN .)
    $end            reduce using rule 12 (expression -> BOOLEAN .)
    RPAREN          reduce using rule 12 (expression -> BOOLEAN .)


state 9

    (2) expression -> expression ADD . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 16

state 10

    (3) expression -> expression SUB . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 17

state 11

    (4) expression -> expression MUL . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 18

state 12

    (5) expression -> expression DIV . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 19

state 13

    (6) expression -> expression EXP . expression
    (2) expression -> . expression ADD expression
    (3) expression -> . expression SUB expression
    (4) expression -> . expression MUL expression
    (5) expression -> . expression DIV expression
    (6) expression -> . expression EXP expression
    (7) expression -> . SUB expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . ID
    (12) expression -> . BOOLEAN

    SUB             shift and go to state 3
    LPAREN          shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ID              shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 20

state 14

    (7) expression -> SUB expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    ADD             reduce using rule 7 (expression -> SUB expression .)
    SUB             reduce using rule 7 (expression -> SUB expression .)
    MUL             reduce using rule 7 (expression -> SUB expression .)
    DIV             reduce using rule 7 (expression -> SUB expression .)
    EXP             reduce using rule 7 (expression -> SUB expression .)
    $end            reduce using rule 7 (expression -> SUB expression .)
    RPAREN          reduce using rule 7 (expression -> SUB expression .)

  ! ADD             [ shift and go to state 9 ]
  ! SUB             [ shift and go to state 10 ]
  ! MUL             [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]
  ! EXP             [ shift and go to state 13 ]


state 15

    (8) expression -> LPAREN expression . RPAREN
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    RPAREN          shift and go to state 21
    ADD             shift and go to state 9
    SUB             shift and go to state 10
    MUL             shift and go to state 11
    DIV             shift and go to state 12
    EXP             shift and go to state 13


state 16

    (2) expression -> expression ADD expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    ADD             reduce using rule 2 (expression -> expression ADD expression .)
    SUB             reduce using rule 2 (expression -> expression ADD expression .)
    $end            reduce using rule 2 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 2 (expression -> expression ADD expression .)
    MUL             shift and go to state 11
    DIV             shift and go to state 12
    EXP             shift and go to state 13

  ! MUL             [ reduce using rule 2 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 2 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 2 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 9 ]
  ! SUB             [ shift and go to state 10 ]


state 17

    (3) expression -> expression SUB expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    ADD             reduce using rule 3 (expression -> expression SUB expression .)
    SUB             reduce using rule 3 (expression -> expression SUB expression .)
    $end            reduce using rule 3 (expression -> expression SUB expression .)
    RPAREN          reduce using rule 3 (expression -> expression SUB expression .)
    MUL             shift and go to state 11
    DIV             shift and go to state 12
    EXP             shift and go to state 13

  ! MUL             [ reduce using rule 3 (expression -> expression SUB expression .) ]
  ! DIV             [ reduce using rule 3 (expression -> expression SUB expression .) ]
  ! EXP             [ reduce using rule 3 (expression -> expression SUB expression .) ]
  ! ADD             [ shift and go to state 9 ]
  ! SUB             [ shift and go to state 10 ]


state 18

    (4) expression -> expression MUL expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    ADD             reduce using rule 4 (expression -> expression MUL expression .)
    SUB             reduce using rule 4 (expression -> expression MUL expression .)
    MUL             reduce using rule 4 (expression -> expression MUL expression .)
    DIV             reduce using rule 4 (expression -> expression MUL expression .)
    $end            reduce using rule 4 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 4 (expression -> expression MUL expression .)
    EXP             shift and go to state 13

  ! EXP             [ reduce using rule 4 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 9 ]
  ! SUB             [ shift and go to state 10 ]
  ! MUL             [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]


state 19

    (5) expression -> expression DIV expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    ADD             reduce using rule 5 (expression -> expression DIV expression .)
    SUB             reduce using rule 5 (expression -> expression DIV expression .)
    MUL             reduce using rule 5 (expression -> expression DIV expression .)
    DIV             reduce using rule 5 (expression -> expression DIV expression .)
    $end            reduce using rule 5 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 5 (expression -> expression DIV expression .)
    EXP             shift and go to state 13

  ! EXP             [ reduce using rule 5 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 9 ]
  ! SUB             [ shift and go to state 10 ]
  ! MUL             [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]


state 20

    (6) expression -> expression EXP expression .
    (2) expression -> expression . ADD expression
    (3) expression -> expression . SUB expression
    (4) expression -> expression . MUL expression
    (5) expression -> expression . DIV expression
    (6) expression -> expression . EXP expression

    ADD             reduce using rule 6 (expression -> expression EXP expression .)
    SUB             reduce using rule 6 (expression -> expression EXP expression .)
    MUL             reduce using rule 6 (expression -> expression EXP expression .)
    DIV             reduce using rule 6 (expression -> expression EXP expression .)
    $end            reduce using rule 6 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 6 (expression -> expression EXP expression .)
    EXP             shift and go to state 13

  ! EXP             [ reduce using rule 6 (expression -> expression EXP expression .) ]
  ! ADD             [ shift and go to state 9 ]
  ! SUB             [ shift and go to state 10 ]
  ! MUL             [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]


state 21

    (8) expression -> LPAREN expression RPAREN .

    ADD             reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression RPAREN .)

